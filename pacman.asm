INCLUDE Irvine32.inc
includelib Winmm.lib    ;for background sound

.data
userName db 256 dup (?)
level db 1  ;As starting level will be 1
score dword 0
temp byte ?
lives db 3  ;At start the player will have 3 lives
strScore BYTE "Your score is: ",0
strLevel db "Level: ", 0
strLives db "Lives Remaining: ", 0
xPos BYTE 50
yPos BYTE 20
xCoinPos BYTE ?
yCoinPos BYTE ?
inputChar BYTE ?
option_user db ?
;;For main screen
l0 db "________________________________________________________________________________________________________________________", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|          ooooooooo.         .o.         .oooooo.   ooo        ooooo       .o.       ooooo      ooo                   |", 0
   db "|          `888   `Y88.      .888.       d8P'  `Y8b  `88.       .888'      .888.      `888b.     `8'                   |", 0
   db "|           888   .d88'     .8'888.     888           888b     d'888      .8'888.      8 `88b.    8                    |", 0
   db "|           888ooo88P'     .8' `888.    888           8 Y88. .P  888     .8' `888.     8   `88b.  8                    |", 0
   db "|           888           .88ooo8888.   888           8  `888'   888    .88ooo8888.    8     `88b.8                    |", 0
   db "|           888          .8'     `888.  `88b    ooo   8    Y     888   .8'     `888.   8       `888                    |", 0
   db "|          o888o        o88o     o8888o  `Y8bood8P'  o8o        o888o o88o     o8888o o8o        `8                    |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "------------------------------------------------------------------------------------------------------------------------", 0
   db "------------------------------------------------------------------------------------------------------------------------", 0
   db "                                                                                                                        ", 0
   db "                                                                                                                        ", 0
   db "                                                                                                                        ", 0
   db "  _____      _             __   __                 _   _                                                                ", 0
   db " |  ___|    | |            \ \ / /                | \ | |                       _                                       ", 0
   db " | |__ _ __ | |_ ___ _ __   \ V /___  _   _ _ __  |  \| | __ _ _ __ ___   ___  (_)                                      ", 0
   db " |  __| '_ \| __/ _ \ '__|   \ // _ \| | | | '__| | . ` |/ _` | '_ ` _ \ / _ \                                          ", 0
   db " | |__| | | | ||  __/ |      | | (_) | |_| | |    | |\  | (_| | | | | | |  __/  _                                       ", 0
   db " \____/_| |_|\__\___|_|      \_/\___/ \__,_|_|    \_| \_/\__,_|_| |_| |_|\___| (_)                                      ", 0
   db "                                                                                                                        ", 0 
   db "                                                                                                                        ", 0
   db " Name:                                                                                                                  ", 0
   db " ---------------------------------                                                                                      ", 0
   db "                                                                                                                        ", 0
   db "                                                                                                                        ", 0
   db "------------------------------------------------------------------------------------------------------------------------", 0

l1 db "________________________________________________________________________________________________________________________", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|                                __    __      _____      __      _   __    __                                         |", 0
   db "|                                \ \  / /     / ___/     /  \    / )  ) )  ( (                                         |", 0
   db "|                                () \/ ()    ( (__      / /\ \  / /  ( (    ) )                                        |", 0
   db "|                                / _  _ \     ) __)     ) ) ) ) ) )   ) )  ( (                                         |", 0
   db "|                               / / \/ \ \   ( (       ( ( ( ( ( (   ( (    ) )                                        |", 0 
   db "|                              /_/      \_\   \ \___   / /  \ \/ /    ) \__/ (                                         |", 0
   db "|                             (/          \)   \____\ (_/    \__/     \______/                                         |", 0
   db "|                             ________________________________________________                                         |", 0
   db "|                             ------------------------------------------------                                         |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|     '|   __  |)|                                                                                                     |", 0
   db "|     _|_      | |(|\/                                                                                                 |", 0
   db "|                   /                                                                                                  |", 0
   db "|                                                                                                                      |", 0  
   db "|                                                                                                                      |", 0
   db "|     ')  __  |,_ _|-     _|-.  ,_ _                                                                                   |", 0
   db "|     /_      |||_\|_|`L|(_|_|()||_\                                                                                   |", 0   
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0 
   db "|                                                                                                                      |", 0
   db "|     ')  __  [~  .|-                                                                                                  |", 0
   db "|     .)      [_><||_                                                                                                  |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "------------------------------------------------------------------------------------------------------------------------", 0

l1_2 db "------------------------------------------------------------------------------------------------------------------------", 0
     db "|               _____ __   _ _______ _______  ______ _     _ _______ _______ _____  _____  __   _ _______              |", 0
     db "|                 |   | \  | |______    |    |_____/ |     | |          |      |   |     | | \  | |______              |", 0
     db "|               __|__ |  \_| ______|    |    |    \_ |_____| |_____     |    __|__ |_____| |  \_| ______|              |", 0
     db "|           ________________________________________________________________________________________________           |", 0
     db "|           ------------------------------------------------------------------------------------------------           |", 0
     db "|                                                                                                                      |", 0 
     db "|  1  - '!', '@', '#', '$' and '%' signs will be used for ghosts only.                                                 |", 0
     db "|  2  - 'w' key = move up, 's' key = move down, 'a' key = move left                                                    |", 0
     db "|     ,'d' key = move right, 'p' key = pause, and 'x' key = exit.                                                      |", 0
     db "|  3  - Intesection of player with any ghost would result in loss of lives of player.                                  |", 0  
     db "|  4  - Players begin their Pac-Man journey with three lives.  ('X' will be symbol of player)                          |", 0
     db "|                                                                                                                      |", 0
     db "|  5  - The maze design becomes complex as the player progresses through the levels.                                   |", 0
     db "|  6  - The speed of pac-man ('X') and the ghosts increases as the levels increase.                                    |", 0
     db "|  7  - 'F' symbol in the game will represent fruit, which when eaten by pac-man, the scores of pac-man increases by 5.|", 0
     db "|  8  - 'P' symbol in this game will represent power pellets.                                                          |", 0 
     db "|                                                                                                                      |", 0   
     db "|  9  - 'P' will provide pac-man a temporary power to eat the ghosts (For 20s only).                                   |", 0 
     db "|  10 - In level 2 and 3 there will be additional obstacles and teleportation paths.                                   |", 0
     db "|  10 - Collecting dots have 1 point in level 1, 2 points in level 2 and 5 points in level 3.                          |", 0
     db "|  12 - Collecting coins will have 50 points in level 1, 100 points in level 2 and 300 points in level 3.              |", 0
     db "|                                                                                                                      |", 0
     db "|  13 - If the player collects 200 coins in level1, he is upgraded to level 2.                                         |", 0
     db "|  14 - Similarly, if a player collects 1000 coins, he will be upgraded to level 2.                                    |", 0
     db "|  15 - 'F' Represents fruit and it appears only in level 3. Eating it gives 100 points.                               |", 0
     db "|  16 -  Best of Luck!                                                                                                 |", 0
     db "|                                                                                                                      |", 0
     db "|                        Press any key to return to main menu...                                                       |", 0
     db "------------------------------------------------------------------------------------------------------------------------", 0

;Maze for level 1
m_l1 db "------------------------------------------------------------------------------------------------------------------------", 0
     db "| (------------------------)                                                                                           |", 0
     db "| (--------LEVEL_1---------)                           _  _     _ ___                                                  |", 0
     db "| (------------------------)                          |_)|_||_||_| |                                                   |", 0
     db "|                                                     | \| || || | |                                                   |", 0
     db "|                                                                                                                      |", 0
     db "|                                                                                                                      |", 0
     db "|         /--------    --------\    /--------    --------\    /--------    --------\    /--------    --------\         |", 0
     db "|         |                    |    |                    |    |                    |    |                    |         |", 0
     db "|         |                    |    |                    |    |                    |    |                    |         |", 0
     db "|         |  /------  ------\  |    |  /------  ------\  |    |  /------  ------\  |    |  /------  ------\  |         |", 0
     db "|         |  |              |  |    |  |              |  |    |  |              |  |    |  |              |  |         |", 0
     db "|         |  |     __       |  |    |  |    ______    |  |    |  |   _______    |  |    |  |     __       |  |         |", 0
     db "|         |  |    /**|      |  |    |  |   /,,__,,\   |  |    |  |  |,,_____|   |  |    |  |    /**|      |  |         |", 0
     db "|         |  |    `|*|      |  |    |  |  |,,/``\,,|  |  |    |  |  |,|_____    |  |    |  |    `|*|      |  |         |", 0
     db "|         |  |     |*|      |  |    |  |  |,|````|,|  |  |    |  |  '_`____''\  |  |    |  |     |*|      |  |         |", 0
     db "|         |  |    _|*|_     |  |    |  |  |,,\__/,,|  |  |    |  |  |,\____),]  |  |    |  |    _|*|_     |  |         |", 0
     db "|         |  |   |_____|    |  |    |  |   \______/   |  |    |  |   \_______/  |  |    |  |   |_____|    |  |         |", 0
     db "|         |  |              |  |    |  |              |  |    |  |              |  |    |  |              |  |         |", 0
     db "|         |  \------  ------/  |    |  \------  ------/  |    |  \------  ------/  |    |  \------  ------/  |         |", 0
     db "|         |                    |    |                    |    |                    |    |                    |         |", 0
     db "|         |                    |    |                    |    |                    |    |                    |         |", 0
     db "|         \--------    --------/    \--------    --------/    \--------    --------/    \--------    --------/         |", 0
     db "|                                                                                                                      |", 0
     db "|                                                                                                                      |", 0
     db "|                                                                                                                      |", 0
     db "|                                                                                                                      |", 0
     db "|                                                                                                                      |", 0
     db "------------------------------------------------------------------------------------------------------------------------", 0

;maze for level 2
m_l2 db "------------------------------------------------------------------------------------------------------------------------", 0
     db "| (------------------------)                      |_'1'_'0'_'6'_'1'_|                                                  |", 0
     db "| (--------LEVEL_2---------)                      /_\,/_\,/_\,/_\,/_\                                                  |", 0
     db "| (------------------------)                     ('R'|'A'|'H'|'A'|'T')                                   ________      |", 0
     db "|                                                 \_/'\_/'\_/'\_/'\_/                                    |*|**|*|      |", 0
     db "|              |~|~~|~|       /*|*|*|*|*|*|*|*|*|*|*|*|*|*\     ~|*|*|*|*|*|*|*|*|*|*|*|~                |*|--|*|      |", 0
     db "|              |*|  |*|       |*|                       |*|    |*|                     |*|               |*|  |*|      |", 0
     db "|              |*|  |*|__     |*|                       |*|    |*|                     |*|               |*|  |*|      |", 0
     db "|              |*|            |*|    /*|*|*|*|*|*|*\    |*|    |*|   |*|*|*|*|*|*|*|   |*|               |*|  |*|      |", 0
     db "|              |*|            |*|    |*|         |*|    |*|    |*|   |*|               |*|            ---|*|  |*|      |", 0
     db "|              |*|  |*|--     |*|    |*|         |*|    |*|    |*|   |*|               |*|                    |*|      |", 0
     db "|              |*|  |*|       |*|    |*|         |*|    |*|    |*|   |*|*|*|*||*|      |*|                    |*|      |", 0
     db "|   ____       |*|  |*|       |*|    |*|         |*|    |*|    |*|            |*|      |*|            ---|*|  |*|      |", 0
     db "|  |*'_*\      |*|  |*|       |*|    \*|   |*|*|*|*/    |*|    |*|            |*|      |*|               |*|  |*|      |", 0
     db "|  |*| |*|     |*|  |*|       |*|                       |*|    |*|            |*|      |*|               |*|  |*|      |", 0
     db "|  |*| |_|     |*|  |*|       |*|                       |*|    |*|   |*|*|*|*||*|       /\               |*|  |*|      |", 0
     db "|  |*|         |*|  |*|       \*|     |*|*|*|*|*|*|*|*|*|*/    |*|                     /**\              |*|  |*|      |", 0
     db "|  |*|         |*|  |*|        /     /                         |*|                    /*/\*\             |*|  |*|      |", 0
     db "|--|_|---------|*|  |*|       /     /                           ~|*|*|*|*|*|*|       /*/  \*\            |*|  |*|------|", 0
     db "                    |*|       |    |                                        /       /_/    \_\           |*|            ", 0
     db "|                   |*|       |    |   /     /                             /        |*|    |*|           |*|           |", 0
     db "|--|-|------ --|*|  |*|       |    |--/     /-----------------------------/         |*|    |*|           |*|  ------ --|", 0
     db "|  |*|  _      |*|  |*|       |                                                     |_|    |*|           |*|  |*|      |", 0
     db "|  |*| |*|     |*|  |*|       |                                                            |*|           |*|  |*|      |", 0
     db "|  |*|_|*|     |_|  |_|       |                                                            |_|-----------|-|  |*|      |", 0
     db "|  |__,__/       |  |---------|    |------------------------/   /----------------------                       |*|      |", 0
     db "|                |                 |                       /   /                    |*|                       |*|      |", 0
     db "|                |-----------------|                                                |_|-----------------------|-|      |", 0
     db "------------------------------------------------------------------------------------------------------------------------", 0

    ;maze for level 3
m_l3 db "------------------ -------------------------------------------- ----------------------------------------------------- --", 0 
     db "|*************     |                                          | |                                   |*************     |", 0
     db "|*************     |                                       |- | |                                   |*************     |", 0
     db "|*************     |         (_)          /-----------------    |           ( )(_)                  |*************     |", 0
     db "|*************     |      (_)(_)                              | |        (_)      (_)               |*************     |", 0
     db "                   |   (_)   (_)          \-----  ----------- | |       (_)        (_)              |                   ", 0
     db "-------------------|         (_)                | |           | |       (_)        (_)              -------------------|", 0
     db "|     -------------|         (_)                | |           | |       (_)        (_)              |      |---        |", 0
     db "|                  |         (_)                | |           | |       (_)        (_)              |      |  |----    |", 0
     db "|     | |--------- |         (_)                | |           | |       (_)        (_)              |      |           |", 0
     db "|     | |          |         (_)                | |           |          (_)      (_)               | - - - - - - - - -|", 0
     db "|     | |------    |   (_)(_)(_)(_)(_)          | |           | |           (_)( )                  |                  |", 0
     db "|     |            |                            | |           | |                                   |      |   |       |", 0
     db "|-------    --------------------------------------------------  --------------------------------------------    -------|", 0
     db "                                                                                                                        ", 0
     db "|--------------------------------------------------    -------  -------    --------------------------------------- ----|", 0
     db "|                                                |            | |                        |   (--- --------- ------ ---)|", 0
     db "|---| |-----------|    (_)(_)(_)(_)(_)           |            | |             (_)        |   (--- ----LEVEL 3----- ---)|", 0
     db "|   | |           |    (_)                       |            |            (_)(_)        |   (--- --------- ------ ---)|", 0
     db "|   | |           |    (_)                       |            | |       (_)   (_)        |            |                |", 0
     db "|     |           |    (_)                       |            | |             (_)        |      ------|----------- ----|", 0
     db "|   | |-------    |    (_)(_)(_)(_)              |            | |             (_)        |            |                |", 0
     db "|   |             |               (_)            |            | |             (_)        |                             |", 0
     db "-------------------               (_)            |            | |             (_)        |          ---------------- --|", 0
     db "|*************        (_)         (_)            |            | |             (_)        |          |*************     |", 0
     db "|*************    |      (_)(_)(_)               |              |       (_)(_)(_)(_)(_)  |          |*************     |", 0
     db "|*************    |                              |------------| |                        |          |*************     |", 0
     db "|*************    |      R A H A T                            | |                        |          |*************     |", 0
     db "----------------- --------------------------------------------- ----------------------------------------------------- --", 0

l2 db "________________________________________________________________________________________________________________________", 0
   db "|                                                                                                                      |", 0
   db "|          ________                        ___________.__       .__       .__               .___ ._._._.               |", 0
   db "|         /  _____/_____    _____   ____   \_   _____/|__| ____ |__| _____|  |__   ____   __| _/ | | | |               |", 0
   db "|        /   \  ___\__  \  /     \_/ __ \   |    __)  |  |/    \|  |/  ___/  |  \_/ __ \ / __ |  | | | |               |", 0
   db "|        \    \_\  \/ __ \|  Y Y  \  ___/   |     \   |  |   |  \  |\___ \|   Y  \  ___// /_/ |   \|\|\|               |", 0 
   db "|         \______  (____  /__|_|  /\___  >  \___  /   |__|___|  /__/____  >___|  /\___  >____ |   ______               |", 0
   db "|                \/     \/      \/     \/       \/            \/        \/     \/     \/     \/   \/\/\/               |", 0
   db "|         ______________________________________________________________________________________________               |", 0
   db "|         ----------------------------------------------------------------------------------------------               |", 0
   db "|         Your Name     :                                                                                              |", 0
   db "|         Your Score    :                                                                                              |", 0
   db "|         Your Level    :                                                                                              |", 0
   db "|______________________________________________________________________________________________________________________|", 0
   db "________________________________________________________________________________________________________________________", 0
   db "|            ___                    _                                                                                  |", 0  
   db "|           / _ \_______ ___ ___   (_)                                                                                 |", 0
   db "|          / ___/ __/ -_|_-<(_-<  _                                                                                    |", 0
   db "|         /_/__/_/_ \__/___/___/ (_)__                                                                                 |", 0   
   db "|          <  / ____  / _ \___ ___  / /__ ___ __                                                                       |", 0
   db "|          / / /___/ / , _/ -_) _ \/ / _ `/ // /                                                                       |", 0 
   db "|         /_/       /_/|_|\__/ .__/_/\_,_/\_, /                                                                        |", 0
   db "|            ___          __/_/         _/___/                 ___                   __                                |", 0
   db "|           |_  |  ____  / __/__ ___   / __/______  _______   / _ )___  ___ ________/ /                                |", 0
   db "|          / __/  /___/ _\ \/ -_) -_) _\ \/ __/ _ \/ __/ -_) / _  / _ \/ _ `/ __/ _  /                                 |", 0
   db "|         /____/_      /___/\__/\__/_/___/\__/\___/_/  \__/ /____/\___/\_,_/_/  \_,_/                                  |", 0
   db "|           |_  /  ____  / __/_ __ (_) /_                                                                              |", 0
   db "|          _/_ <  /___/ / _/ \ \ // / __/                                                                              |", 0
   db "|         /____/       /___//_\_\/_/\__/                                                                               |", 0
   db "|______________________________________________________________________________________________________________________|", 0

l2_2 db "________________________________________________________________________________________________________________________", 0
     db "|                           ___   ___  _____  ____  ____    ____  _____    __    ____  ____                            |", 0
     db "|                          / __) / __)(  _  )(  _ \( ___)  (  _ \(  _  )  /__\  (  _ \(  _ \                           |", 0
     db "|                          \__ \( (__  )(_)(  )   / )__)    ) _ < )(_)(  /(__)\  )   / )(_) )                          |", 0
     db "|                          (___/ \___)(_____)(_)\_)(____)  (____/(_____)(__)(__)(_)\_)(____/                           |", 0
     db "|                          _________________________________________________________________                           |", 0
     db "|                          -----------------------------------------------------------------                           |", 0 
     db "|           +-+-+-+-+-+-+ +-+-+-+-+            |                +-+-+-+-+-+        |        +-+-+-+-+-+                |", 0
     db "|           |P|l|a|y|e|r| |N|a|m|e|            |                |L|e|v|e|l|        |        |S|c|o|r|e|                |", 0
     db "|           +-+-+-+-+-+-+ +-+-+-+-+            |                +-+-+-+-+-+        |        +-+-+-+-+-+                |", 0
     db "|______________________________________________________________________________________________________________________|", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0  
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0   
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0 
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|                                              |                                   |                                   |", 0
     db "|______________________________________________|___________________________________|___________________________________|", 0

     ;window for pause

p  db "------------------------------------------------------------------------------------------------------------------------", 0
   db "|          _______  _______  _______  _______    _______  _______           _______  _______  ______     _  _          |", 0
   db "|         (  ____ \(  ___  )(       )(  ____ \  (  ____ )(  ___  )|\     /|(  ____ \(  ____ \(  __  \   ( )( )         |", 0
   db "|         | (    \/| (   ) || () () || (    \/  | (    )|| (   ) || )   ( || (    \/| (    \/| (  \  )  | || |         |", 0
   db "|         | |      | (___) || || || || (__      | (____)|| (___) || |   | || (_____ | (__    | |   ) |  (_)(_)         |", 0
   db "|         | | ____ |  ___  || |(_)| ||  __)     |  _____)|  ___  || |   | |(_____  )|  __)   | |   | |   _  _          |", 0
   db "|         | | \_  )| (   ) || |   | || (        | (      | (   ) || |   | |      ) || (      | |   ) |  ( )( )         |", 0 
   db "|         | (___) || )   ( || )   ( || (____/\  | )      | )   ( || (___) |/\____) || (____/\| (__/  )  | || |         |", 0
   db "|         (_______)|/     \||/     \|(_______/  |/       |/     \|(_______)\_______)(_______/(______/   (_)(_)         |", 0
   db "|                                                                                                                      |", 0
   db "|         ____________________________________________________________________________________________________         |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|             _                ___                                                                                     |", 0
   db "|            /' )              |  _`\                                                                                  |", 0
   db "|           (_, |    ______    | (_) )   __    ___  _   _   ___ ___     __                                             |", 0
   db "|             | |   (______)   | ,  /  /'__`\/',__)( ) ( )/' _ ` _ `\ /'__`\                                           |", 0  
   db "|             | |              | |\ \ (  ___/\__, \| (_) || ( ) ( ) |(  ___/                                           |", 0
   db "|             (_)              (_) (_)`\____)(____/`\___/'(_) (_) (_)`\____)                                           |", 0
   db "|                                                                                                                      |", 0   
   db "|              __                  ___             _                                                                   |", 0
   db "|            /'__`\               (  _`\        _ ( )_                                                                 |", 0 
   db "|           (_)  ) )    ______    | (_(_)      (_)| ,_)                                                                |", 0
   db "|              /' /    (______)   |  _)_ (`\/')| || |                                                                  |", 0
   db "|            /' /( )              | (_( ) >  < | || |_                                                                 |", 0
   db "|           (_____/'              (____/'(_/\_)(_)`\__)                                                                |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "|                                                                                                                      |", 0
   db "------------------------------------------------------------------------------------------------------------------------", 0
collision_page db "________________________________________________________________________________________________________________________", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|        ____     ____     _____       _____        _____    _____    _____     ____        __      _                  |", 0
               db "|       / ___)   / __ \   (_   _)     (_   _)      (_   _)  / ____\  (_   _)   / __ \      /  \    / )                 |", 0
               db "|      / /      / /  \ \    | |         | |          | |   ( (___      | |    / /  \ \    / /\ \  / /                  |", 0
               db "|     ( (      ( ()  () )   | |         | |          | |    \___ \     | |   ( ()  () )   ) ) ) ) ) )                  |", 0 
               db "|     ( (      ( ()  () )   | |   __    | |   __     | |        ) )    | |   ( ()  () )  ( ( ( ( ( (                   |", 0
               db "|      \ \___   \ \__/ /  __| |___) ) __| |___) )   _| |__  ___/ /    _| |__  \ \__/ /   / /  \ \/ /                   |", 0
               db "|       \____)   \____/   \________/  \________/   /_____( /____/    /_____(   \____/   (_/    \__/                    |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|      ______      _____   ________    _____     ____   ________    _____   ______       _______ _______ _______       |", 0
               db "|     (_  __ \    / ___/  (___  ___)  / ___/    / ___) (___  ___)  / ___/  (_  __ \      \     / \     / \     /       |", 0
               db "|       ) ) \ \  ( (__        ) )    ( (__     / /         ) )    ( (__      ) ) \ \      \   /   \   /   \   /        |", 0
               db "|      ( (   ) )  ) __)      ( (      ) __)   ( (         ( (      ) __)    ( (   ) )      ) (     ) (     ) (         |", 0  
               db "|       ) )  ) ) ( (          ) )    ( (      ( (          ) )    ( (        ) )  ) )      \_/     \_/     \_/         |", 0
               db "|      / /__/ /   \ \___     ( (      \ \___   \ \___     ( (      \ \___   / /__/ /        _       _       _          |", 0
               db "|     (______/     \____\    /__\      \____\   \____)    /__\      \____\ (______/        (_)     (_)     (_)         |", 0   
               db "|                                                                                                                      |", 0
               db "|    ____________________________________                                                                              |", 0 
               db "|   |                                   |                                                                              |", 0
               db "|   |  PAC-MAN COLLIDED WITH THE GHOST  |                                                                              |", 0
               db "|   |              SO                   |                                                                              |", 0
               db "|   |      PAC-MAN LOST 1-LIFE          |                                                                              |", 0
               db "|   |___________________________________|                                                                              |", 0
               db "|                                                                                                                      |", 0
               db "------------------------------------------------------------------------------------------------------------------------", 0

Level_up_disp  db "________________________________________________________________________________________________________________________", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                            '7MMF'      '7MMmmmYMM '7MMF'   '7MF''7MMmmmYMM  '7MMF'                                   |", 0
               db "|                              MM          MM    `7   `MA     ,V    MM    `7    MM                                     |", 0
               db "|                              MM          MM   d      VM:   ,V     MM   d      MM                                     |", 0
               db "|                              MM          MMmmMM       MM.  M'     MMmmMM      MM                                     |", 0 
               db "|                              MM      ,   MM   Y  ,    `MM A'      MM   Y  ,   MM      ,                              |", 0
               db "|                              MM     ,M   MM     ,M     :MM;       MM     ,M   MM     ,M                              |", 0
               db "|                            .JMMmmmmMMM .JMMmmmmMMM      VF      .JMMmmmmMMM .JMMmmmmMMM                              |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                       '7MMF'   `7MF''7MMmmmMq.     OO OO OO                                          |", 0
               db "|                                         MM       M    MM   `MM.    88 88 88                                          |", 0
               db "|                                         MM       M    MM   ,M9     || || ||                                          |", 0  
               db "|                                         MM       M    MMmmdM9      || || ||                                          |", 0
               db "|                                         MM       M    MM           `' `' `'                                          |", 0
               db "|                                         YM.     ,M    MM           ,, ,, ,,                                          |", 0   
               db "|                                          `bmmmmd''  .JMML.         db db db                                          |", 0
               db "|                                                                                                                      |", 0 
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "|                                                                                                                      |", 0
               db "------------------------------------------------------------------------------------------------------------------------", 0
;
;
ghost db '!'
      db '@'
      db '#'
      db '$'
      db '%'
ghost_x  db 10
         db 115
         db 21
         db 15
         db 85
ghost_y  db 4
         db 5
         db 8
         db 20
         db 27
 previous_move db 0
               db 1
               db 2
               db 3
               db 2
               db 1
 previousCharacter db '.'
                   db '.'
                   db '.'
                   db '.'
                   db '.'
;File handling
filename db "Store_User_Details.txt"
filehandle Handle ?
Buffer_Size = 300
buffer BYTE Buffer_Size DUP(?)
;;getting input from file
in_buff_size = 50000
inputBuffer db in_buff_size dup (?)
;
BlueTextOnWhite = Blue + (white * 16)
BrownTextOnWhite = Brown + (white * 16)
GreenTextOnWhite = Green + (white * 16)
BlackTextOnWhite = Black + (white * 16)
CyanTextOnWhite = Cyan + (white * 16)
RedTextOnLightGray = Red + (LightGray * 16)
BlackTextOnLightGray = Black + (lightGray * 16)
MagentaOnLightCyan = Magenta + (LightCyan * 16)
BlackOnYellow = Black + (Yellow * 16)
BlackTextOnLightMagenta  = Black + (LightMagenta * 16)
BlueTextOnGray = Blue + (gray * 16)
BlueTextOnLightGray = Blue + (lightgray * 16)
WhiteTextOnGray = White + (gray * 16)
RedTextOnLightBlue = Red + (LightBlue * 16)
MagentaTextOnLightGray = Magenta + (LightGray * 16)
WhiteTextOnGreen = White + (Green * 16)
BlueTextOnLightGreen = Blue + (LightGreen * 16)
GreenTextOnGray = Green + (Gray * 16)
temp_var dword ?
dots_intersection_score dword ?
;To include the background music
    songName db "Pac-Man-Theme-Song.wav", 0
    wakaSound   db  "C:\Users\Rahat\Desktop\COAL PROJECT\COAL PROJECT", 0
    PlaySound   PROTO,
    pszSound:PTR BYTE,
    hmod:DWORD,
    fdwSound:DWORD
;
fruit db 'F'
fruit_count db 1
.code
main PROC
;opening file to store the user name, level and score into it
    mov edx,OFFSET filename
    call CreateOutputFile
    mov filehandle, EAX
start_new_game:
    ;resetting some variables
    mov level, 1  ;As starting level will be 1
    mov score, 0
    mov lives, 3  ;At start the user will have 3 lives
    mov inputChar, 0
;;The main screen
    call clrscr             ;To clear the screen
    mov eax, yellow
    call settextcolor 
    mov bh,0        ;for row number
    mov bl,0        ;for coloumn number
    mov ecx, 13
    mov esi, offset l0
    ms1: 
        mov dh,bh
        mov dl,bl
        call Gotoxy
        mov edx, esi
        call writestring
        inc bh
        add esi, 121
    Loop ms1
    mov eax, RedTextOnLightGray
    call settextcolor 
    mov ecx, 17
    ms2: 
        mov dh,bh
        mov dl,bl
        call Gotoxy
        mov edx, esi
        call writestring
        inc bh
        add esi, 121
    Loop ms2
    sub bh, 5
    mov dh,bh
    mov dl, 7
    call Gotoxy
    mov ecx, 256
    mov edx, offset userName    ;TO input user name, in the main screen
    call readstring
    ;Main screen completed over here, now menu screen
    ;MENU SCREEN
    Menu:
        mov eax, BlackTextOnLightGray 
        call settextcolor
        ;mov bh,0        ;for row number
        add bh, 6        ;Going to the next page
        mov bl,0        ;for coloumn number
        mov ecx, 30
        mov esi, offset l1
        menu_loop: 
                mov dh,bh
                mov dl,bl
                call Gotoxy
                mov edx, esi
                call writestring
                inc bh
                add esi, 121
        Loop menu_loop
        call readchar
        cmp al, '1'
        je start
            cmp al, '2'
            je Instruction
                cmp al, '3'
                    je exitGame
    ;MENU SCREEN ENDs

    ;Instructions pages
    Instruction: 
        add bh, 1       ;to go to the next page
        mov dh, bh
        mov dl, 0
        call gotoxy     ;going to next page...
        mov eax, BlueTextOnWhite
        call settextcolor 
        mov ecx, 7
        mov esi, offset l1_2
        go_1: 
            mov edx, esi
            call WriteString
            add esi, 121
        loop go_1
        mov eax, BrownTextOnWhite
        call settextcolor 
        mov ecx, 6
        go_2: 
            mov edx, esi
            call WriteString
            add esi, 121
        loop go_2
        mov eax, GreenTextOnWhite
        call settextcolor 
        mov ecx, 5
        go_3: 
            mov edx, esi
            call WriteString
            add esi, 121
        loop go_3
        mov eax, BlackTextOnWhite
        call settextcolor 
        mov ecx, 5
        go_4: 
            mov edx, esi
            call WriteString
            add esi, 121
        loop go_4
        mov eax, CyanTextOnWhite 
        call settextcolor 
        mov ecx, 7
        go_5: 
            mov edx, esi
            call WriteString
            add esi, 121
        loop go_5
        call readchar   ;to wait for user to enter any key
        sub bh, 37      ;to go back to the same page
        jmp Menu        ;jump to main menu
    ;Instruction page ended
    ;Now starting game
    start:
    ; draw ground at (0,29):
    mov eax,blue ;(black * 16)
    call SetTextColor

    call makeDOTS       ;To make dots in the empty space, this is done inside memory and not on screen
    call constructMAZE  ;To construct the maze on screen
    
    call createGhosts
    call DrawPlayer
    call CreateRandomCoin
    call DrawCoin
    call Randomize
    
    gameLoop:
          
         INVOKE PlaySound, OFFSET songName, NULL, 11h
         
        call movGhosts          ;To move the ghosts on the screen 
        call checkCollisions    ;To check the collisions between player and the pacman
        cmp lives, 0
        je exitGame             ;If all 3 lives of the player are finished then the game will end
        
        ;Collecting coins
            mov bl,xPos
            cmp bl,xCoinPos
            jne notCollecting
            mov bl,yPos
            cmp bl,yCoinPos
            jne notCollecting
            ; player is intersecting coin:
            cmp level, 1
            jne see_level_2
                add score, 50
                jmp score_added
            see_level_2:
                cmp level, 2
                jne its_level_3
                add score, 100
                jmp score_added
            its_level_3:
                add score, 300
            score_added:
            call CreateRandomCoin

        notCollecting:      ;when the player has not intersected the coin
        call DrawCoin           ;To draw the coin on screen
        ;Calcutaing scores and updating levels accordingly
        cmp score, 200      ;after 200 coins level upgraded
        jg level2
            jmp next_step
        level2:
            cmp score, 1000 ;after 1000coins, level upgraded
            jg level3
                cmp level, 2
                je next_step
                    mov level, 2
                    call makeDOTS       ;To make dots in the empty space, this is done inside memory and not on screen
                    call constructMAZE 
                    call level_up       ;To display level up to player
                    jmp next_step
        level3: 
            cmp level, 3
            je next_step
                mov level, 3
                call makeDOTS           ;To make dots in the empty space, this is done inside memory and not on screen
                call constructMAZE 
                call level_up           ;To display level up to player
        next_step:
        call draw_score_level_lives
        cmp level, 3
        jne dont_add
        add_fruit:
            cmp fruit_count, 0 
            je dont_add
            mov fruit_count, 0
            call create_fruit
        dont_add:
        ; get user key input:
        call Readkey
        jz skip_input   ;if user dosn't enters key, zero flag is 1...
            mov inputChar,al
        skip_input:
        ; exit game if user types 'x':
        cmp inputChar,"x"
        je exitGame

        cmp inputChar,"w"
        je moveUp
        cmp inputChar,"s"
        je moveDown
        cmp inputChar,"a"
        je moveLeft
        cmp inputChar,"d"
        je moveRight
        cmp inputChar, "p"
        je pause_game
        cmp inputChar, "q"  ;incase the game is resumed
        je resume
        jmp  gameLoop

        moveUp:
            call up
            call checkCollisions        ;To check if any collison with ghost occurs when player moves up
            jmp gameLoop
        moveDown:
            call down
            call checkCollisions        ;To check if any collison with ghost occurs when player moves down
            jmp gameLoop
        moveLeft:
            call left
            call checkCollisions        ;To check if any collison with ghost occurs when player moves towards the left
            jmp gameLoop
        moveRight:
            call right
            call checkCollisions        ;To check if any collison with ghost occurs when player moves towards the right
            jmp gameLoop
        resume:
            mov dl, 0
            mov dh, 0
            call gotoxy
            jmp gameLoop
        pause_game:
            mov inputChar, 'q'    ;so that in case the player resumes, pac man will stand still at its position and wait for next instruction...
            mov ecx, 11
            mov esi, offset p
            mov bh, 31   ;For columns, its 31 so that the pause screen goes on next page and the current game is not disturbed...
            mov bl, 0   ;For rows
            mov eax, MagentaOnLightCyan
            call SetTextColor
            loop_p_1:
                mov edx, 0
                mov dh, bh
                mov dl, bl
                call gotoxy
                mov edx, esi
                call writestring 
                add esi, 121
                inc bh
            Loop loop_p_1
            mov eax, BlackOnYellow
            call SetTextColor
            mov ecx, 19
            loop_p_2:
                mov edx, 0
                mov dh, bh
                mov dl, bl
                call gotoxy
                mov edx, esi
                call writestring 
                add esi, 121
                inc bh
            Loop loop_p_2
            take_input:
                call readkey
                jz take_input   ;if no input provided, then take input again...
                cmp al, '1'     ;as the input will be in character...
                je gameloop
                ;IF player inputs 1, then it resumes
                cmp al, '2'
                jne take_input  ;if input is neither 1 or 2, so input will be taken again
                ;If the input is 2, as in this case if the program reaches till here, so automatically the program will go to exit game and end
    exitGame:
    ;writing to file at end of the game
    ;moving username, level and score into buffer
    call write_to_file
    ;Exit screen
    call clrscr             ;To clear the screen
    mov eax, cyan
    call settextcolor 
    mov bh,0        ;for row number
    mov bl,0        ;for coloumn number
    mov ecx, 14
    mov esi, offset l2
    part1: 
        mov dh,bh
        mov dl,bl
        call Gotoxy
        mov edx, esi
        call writestring
        inc bh
        add esi, 121
    Loop part1
    mov eax, green
    call settextcolor 
    mov ecx, 16
    part2: 
        mov dh,bh
        mov dl,bl
        call Gotoxy
        mov edx, esi
        call writestring
        inc bh
        add esi, 121
    Loop part2
    ;Displaying player name, score and level at the end of the game...
    mov eax, cyan
    call settextcolor 
    mov dh, 10
    mov dl, 27
    call gotoxy
    mov edx, offset userName
    call writestring
    mov dh, 11
    mov dl, 27
    call gotoxy
    mov eax, score
    call writeint
    mov dh, 12
    mov dl, 27
    call gotoxy
    movzx eax, level 
    call writeint
    call readchar
    sub al, 48  ;to convert it into integer
    mov option_user, al    ;To check user option
    cmp option_user, 1
    je start_new_game
    cmp option_user, 2
    jne end_game
    ;If contol goes here its means that option 2 is selected so showing the score board
    mov ecx, 7
    mov eax, magenta
    call settextcolor 
    mov esi, offset l2_2
    mov bh, 0
    mov bl, 0
    loop_sb:
        mov edx, 0
        mov dh, bh
        mov dl, bl
        call gotoxy
        mov edx, esi
        call writestring 
        add esi, 121
        inc bh
    Loop loop_sb
    mov ecx, 22
    mov eax, cyan
    call settextcolor 
    loop_sb2:
        mov edx, 0
        mov dh, bh
        mov dl, bl
        call gotoxy
        mov edx, esi
        call writestring 
        add esi, 121
        inc bh
    Loop loop_sb2
    ;reading file and showing the scoreboard
    mov eax,fileHandle
    call CloseFile
    mov edx, offset filename
    call openinputfile
    mov filehandle, eax
    mov eax, filehandle
    mov edx, offset inputBuffer
    mov ecx, offset in_buff_size
    call ReadFromFile
    mov edx, offset inputBuffer
    mov [inputBuffer+eax+1], 0ah
    call writestring    ;to ouptput all the content

    call readchar
    end_game:
       
        exit
main ENDP

constructMAZE PROC uses ebx ecx edx esi
    ;To construct the maze in between the screen
    ;add bh,1        ;to go to next page
    mov bh, 0
    mov bl,0        ;for coloumn number
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        mov xPos, 50    ;setting x coordinates of player on screen
        mov yPos,  5    ;setting y coordinates of player on screen
        call UpdatePlayer
        call DrawPlayer
        call clrscr                 ;to clear the screen
        mov eax, BlueTextOnLightGray    ;to fix the background and font colours
        call settextcolor
        jmp start_maze
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            mov xPos, 20    ;setting x coordinates of player on screen
            mov yPos,  5    ;setting y coordinates of player on screen
            call UpdatePlayer
            call DrawPlayer
            call clrscr                 ;to clear the screen
            mov eax, WhiteTextOnGray    ;to fix the background and font colours
            call settextcolor
            jmp start_maze
        level3:
            mov esi, offset m_l3
            mov xPos, 20    ;setting x coordinates of player on screen
            mov yPos,  5    ;setting y coordinates of player on screen
            call UpdatePlayer
            call DrawPlayer
            call clrscr                 ;to clear the screen
            mov eax, WhiteTextOnGreen   ;to fix the background and font colours
            call settextcolor
    start_maze:
    mov ecx, 29
    loopm1: 
            mov dh,bh
            mov dl,bl
            call Gotoxy
            mov edx, esi
            call writestring
            inc bh
            add esi, 121
    Loop loopm1
    ;Now I want the dots on the screen to look asthetic and visible to player
    cmp level, 1    ;check if the level is 1
    jne not_l_1     ;if its not level 1
        mov eax, RedTextOnLightGray    ;to fix the background and font colours
        call settextcolor
        mov esi, offset m_l1
        jmp dots
    not_l_1: 
        cmp level,2 
        jne l_3     ;if its not level 2 so jump to level 3
            mov eax, BlueTextOnLightGray    ;to fix the background and font colours
            call settextcolor
            mov esi, offset m_l2
            jmp dots
        l_3:
            mov eax, BlueTextOnLightGreen    ;to fix the background and font colours
            call settextcolor 
            mov esi, offset m_l3
        dots:
        mov bh, 0
        mov bl, 0
        mov ecx, 29
        loop_dots_1:
            mov temp_var, ecx   ;temporarily storing the value of ecx
            mov ecx, 121
            loop_dots_2:
                mov al, '.'
                cmp [esi], al     ;if there is a dot then it will make it promenent
                jne continue
                mov dl, bl
                mov dh, bh
                call gotoxy
                call writechar
                continue:
                        inc esi
                        inc bl
            Loop loop_dots_2
            mov ecx, temp_var
            inc bh
            mov bl, 0
        Loop loop_dots_1
    ret
constructMAZE ENDP

makeDOTS PROC uses esi eax ecx 
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        jmp making_dots
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            jmp making_dots
        level3:
            mov esi, offset m_l3
        making_dots:
        mov eax, 29   ;number of rows in each maze
        mov ecx, 121    ;number of characters in each row
        mul ecx
        mov ecx, eax    ;storing output in ecx so that loop can run that many times
        mov ah, ' '     ;   I will use ah instead of space in the loop now
        mov al, '.'     ;   I will use al instead of  dot  in the loop now
        loop_dots:
            cmp [esi], ah     ;if there is an empty space then it will comvert it into dot
            jne continue
            mov [esi], al  ;so as this is empty space, i convert it into dot
            jmp skip
            continue:
                mov dl, 'X'
                cmp [esi], dl   
                jne skip
                mov [esi], al  ;so as this is player of previous game, so I convert it into dot
            skip:
                     inc esi
        Loop loop_dots
        ret
makeDOTS ENDP

DrawPlayer PROC uses eax edx ebx
    ;to check for the level;
    cmp level, 1    ;check if the level is 1
    je level_1
    cmp level, 2 
    je level_2
    level_3: 
        mov eax, RedTextOnLightBlue
        call SetTextColor
        mov esi, offset m_l3
        jmp continue
    level_2:
        mov eax, RedTextOnLightBlue
        call SetTextColor
        mov esi, offset m_l2
        jmp continue
    level_1:
        mov eax, RedTextOnLightBlue
        call SetTextColor
        mov esi, offset m_l1
    
    continue: 
        movzx eax, yPos
        mov ebx, 121
        mul ebx
        movzx ebx, xPos
        add eax, ebx   ;now eax has the position of player in memory
        mov bl, 'X'
        mov [esi + eax], bl    ;Moving player in memory
        mov dl,xPos
        mov dh,yPos
        call Gotoxy
        mov al,"X"             ;Drawing player on screem
        call WriteChar
    ret
DrawPlayer ENDP

UpdatePlayer PROC uses esi eax ebx edx
    ;to check for the level;
    cmp level, 1    ;check if the level is 1
    je level_1
    cmp level, 2 
    je level_2
    level_3: 
        mov eax, BlueTextOnLightGreen
        call SetTextColor
        mov esi, offset m_l3
        jmp continue
    level_2:
        mov eax, BlueTextOnLightGray
        call SetTextColor
        mov esi, offset m_l2
        jmp continue
    level_1:
        mov eax, BlueTextOnLightGray
        call SetTextColor
        mov esi, offset m_l1
    
    continue: 
        movzx eax, yPos
        mov ebx, 121
        mul ebx
        movzx ebx, xPos
        add eax, ebx   ;now eax has the position of player in memory
        mov bl, ' '
        mov [esi + eax], bl    ;clearing that place in memory where the player reached
        mov dl,xPos
        mov dh,yPos
        call Gotoxy
        mov al," "              ;Now cleared that place in screen as well
        call WriteChar
    ret
UpdatePlayer ENDP

DrawCoin PROC
    mov eax, BlueTextOnWhite
    call SetTextColor
    mov dl,xCoinPos
    mov dh,yCoinPos
    call Gotoxy
    mov al,"0"
    call WriteChar
    ;Now writing that coin in memory
    movzx eax, yCoinPos
    mov ebx, 121
    mul ebx
    movzx ebx, xCoinPos
    add eax, ebx
    ;Now eax has the position where coin is placed
    ;checking the level to check the maze configurations
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        jmp save
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            jmp save
        level3:
            mov esi, offset m_l3
    save:
        mov bl, '0'             ;coin is represented by 0 and is in bl
        mov [esi+eax], bl       ;moving coin at current position inside memory
    ret
DrawCoin ENDP

CreateRandomCoin PROC uses eax ebx esi
    ;checking the level to check the maze configurations
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        jmp random_point
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            jmp random_point
        level3:
            mov esi, offset m_l3
    
    random_point:
            mov eax,120
            call RandomRange
            mov xCoinPos,al
            mov eax,29
            call RandomRange
            mov yCoinPos,al
            ;Now checking if the random point is empty
            movzx eax, yCoinPos
            mov ebx, 121
            mul ebx
            movzx ebx, xCoinPos
            add eax, ebx
            ;Now eax will have the index where coin should be placed
            mov bl, [esi + eax]
            ;now bl will have the charaacter which is already there
            cmp bl, " "
            je continue
                cmp bl, "."
                    je continue
                    jmp random_point    ;if point not empty then regeneration
            continue:
    ret
CreateRandomCoin ENDP

up PROC uses eax ebx esi
    ;to check for the maze configuration
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        mov dots_intersection_score, 1
        jmp continue_up
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            mov dots_intersection_score, 2
            jmp continue_up
        level3:
            mov esi, offset m_l3
            mov dots_intersection_score, 5
    continue_up:
    ;First see for teleportation incase of level 3
    cmp level, 3
    jne cont
        cmp yPos, 0
        jne check_next_p
        cmp xpos, 18
        jne check_next_p
            ;first teleport path found
            call UpdatePlayer
            mov yPos, 28        ;To mov the player at the bottom of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
        check_next_p:
            cmp yPos, 0
            jne check_next_p2
            cmp xpos, 63
            jne check_next_p2
                ;second teleport path found
                call UpdatePlayer
                mov yPos, 28        ;To move the player at the bottom of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done
        check_next_p2:
            cmp yPos, 0
            jne cont
            cmp xpos, 117
            jne cont
                ;third teleport path found
                call UpdatePlayer
                mov yPos, 28        ;To move the player at the bottom of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done

    cont:
    ; allow player to jump:
    ;checking if this space is empty or not
    movzx eax, yPos
    dec eax         ;To see the row above it
    mov ebx, 121
    mul ebx
    movzx ebx, xPos
    add eax, ebx
    ;Now eax will have the index where character should be moved
    mov bl, [esi + eax]
    ;now bl will have the charaacter in it
    cmp bl, " "
    je continue
        cmp bl, '.'
        jne check_for_coin
            mov eax, dots_intersection_score   ;if player goes through dots, score is increased, player moves and dots are removed
            add score, eax
            jmp continue
        check_for_coin:
            cmp bl, '0'
            je continue
            jmp skip
    continue:
        call UpdatePlayer
        dec yPos
        call DrawPlayer
        ;Adding delay according to levels to control the speed of the game
        cmp level, 3
        je lvl_3
            cmp level, 2
            jne lvl_1
            mov eax,50
            jmp d
            ;lvl_2
            lvl_1:
                mov eax,70
                jmp d
        lvl_3:
            mov eax,20
        d:
        call Delay
    skip:
    ret
up ENDP

down PROC uses eax ebx esi
    ;to check for the maze configuration
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        mov dots_intersection_score, 1
        jmp continue_down
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            mov dots_intersection_score, 2
            jmp continue_down
        level3:
            mov esi, offset m_l3
            mov dots_intersection_score, 5
    continue_down:
    ;First see for teleportation incase of level 3
    cmp level, 3
    jne cont
        cmp yPos, 28
        jne check_next_p
        cmp xpos, 18
        jne check_next_p
            ;first teleport path found
            call UpdatePlayer
            mov yPos, 0         ;To move the player at the top of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
        check_next_p:
            cmp yPos, 28
            jne check_next_p2
            cmp xpos, 63
            jne check_next_p2
                ;second teleport path found
                call UpdatePlayer
                mov yPos, 0     ;To move the player at the top of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done
        check_next_p2:
            cmp yPos, 28
            jne cont
            cmp xpos, 117
            jne cont
                ;third teleport path found
                call UpdatePlayer
                mov yPos, 0     ;To mov the player at the top of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done
    cont:
    ; allow player to move down:
    ;checking if this space is empty or not
    movzx eax, yPos
    inc eax     ;to see the row below it
    mov ebx, 121
    mul ebx
    movzx ebx, xPos
    add eax, ebx
    ;Now eax will have the index where character should be moved
    mov bl, [esi + eax]
    ;now bl will have the charaacter in it
    cmp bl, " "
    je continue
        cmp bl, '.'
        jne check_for_coin
            mov eax, dots_intersection_score   ;if player goes through dots, score is increased according to level, player moves and dots are removed
            add score, eax
            jmp continue
        check_for_coin:
            cmp bl, '0'
            je continue
            jmp skip
    continue:
        call UpdatePlayer
        inc yPos
        call DrawPlayer
        ;Adding delay according to levels to control the speed of the game
        cmp level, 3
        je lvl_3
            cmp level, 2
            jne lvl_1
            mov eax,50
            jmp d
            ;l2
            lvl_1:
                mov eax,70
                jmp d
        lvl_3:
            mov eax,20
        d:
        call Delay
    skip: 
    ret
down ENDP 

left PROC uses eax ebx esi
    ;to check for the maze configuration
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        mov dots_intersection_score, 1
        jmp continue_left
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            mov dots_intersection_score, 2
            jmp continue_left
        level3:
            mov esi, offset m_l3
            mov dots_intersection_score, 5
    continue_left:
    ;First see for teleportation incase of level 3
    cmp level, 3
    jne cont
        cmp yPos, 5
        jne check_next_p
        cmp xpos, 0
        jne check_next_p
            ;first teleport path found
            call UpdatePlayer
            mov xPos, 119   ;To move the player at the right end of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
        check_next_p:
            cmp yPos, 14
            jne cont
            cmp xpos, 0
            jne cont
                ;second teleport path found
                call UpdatePlayer
                mov xPos, 119   ;To move the player at the right end of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done

    cont:
    ;Now see teleportation for level 2
    cmp yPos, 19
        jne continue_left_1
        cmp xpos, 0
        jne continue_left_1
            ;teleport path found
            call UpdatePlayer
            mov xPos, 119   ;To move the player at the right end of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
    continue_left_1:
    ; allow player to move left:
    ;checking if this space is empty or not
    movzx eax, yPos
    mov ebx, 121
    mul ebx
    movzx ebx, xPos
    dec ebx     ;to see the left character of the player
    add eax, ebx
    ;Now eax will have the index where character should be moved
    mov bl, [esi + eax]
    ;now bl will have the charaacter in it
    cmp bl, " "
    je continue
        cmp bl, '.'
        jne check_for_coin
            mov eax, dots_intersection_score   ;if player goes through dots, score is incremented, player moves and dots are removed
            add score, eax
            jmp continue
        check_for_coin:
            cmp bl, '0'
            je continue
            jmp skip
    continue:
        call UpdatePlayer
        dec xPos
        call DrawPlayer
        ;Adding delay according to levels to control the speed of the game
        cmp level, 3
        je lvl_3
            cmp level, 2
            jne lvl_1
            mov eax,50
            jmp d
            ;l2
            lvl_1:
                mov eax,70
                jmp d
        lvl_3:
            mov eax,20
        d:
        call Delay
    skip:
    ret
left ENDP

right PROC uses eax ebx esi
    ;to check for the maze configuration
    cmp level, 1    ;check if the level is 1
    jne not_level_1
        mov esi, offset m_l1
        mov dots_intersection_score, 1
        jmp continue_right
    not_level_1: 
        cmp level,2 
        jne level3
            mov esi, offset m_l2
            mov dots_intersection_score, 2
            jmp continue_right
        level3:
            mov esi, offset m_l3
            mov dots_intersection_score, 5
    continue_right:
    ;First see for teleportation incase of level 3
    cmp level, 3
    jne cont
        cmp yPos, 5
        jne check_next_p
        cmp xpos, 119
        jne check_next_p
            ;first teleport path found
            call UpdatePlayer
            mov xPos, 0     ;To move the player at the left end of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
        check_next_p:
            cmp yPos, 14
            jne cont
            cmp xpos, 119
            jne cont
                ;second teleport path found
                call UpdatePlayer
                mov xPos, 0         ;To move the player at the left end of the screen
                call DrawPlayer
                mov eax, 70
                call Delay
                jmp skip    ;teleportation done
    cont:
    ;Now see teleportation for level 2
    cmp yPos, 19
        jne continue_right_1
        cmp xpos, 119
        jne continue_right_1
            ;teleport path found
            call UpdatePlayer
            mov xPos, 0   ;To move the player at the right end of the screen
            call DrawPlayer
            mov eax, 70
            call Delay
            jmp skip    ;teleportation done
    continue_right_1:
    ; allow player to move right:
    ;checking if this space is empty or not
    movzx eax, yPos
    mov ebx, 121
    mul ebx
    movzx ebx, xPos
    inc ebx     ;to see the right character of the player
    add eax, ebx
    ;Now eax will have the index where character should be moved
    mov bl, [esi + eax]
    ;now bl will have the charaacter in it
    cmp bl, " "
    je continue
        cmp bl, '.'
        jne check_for_coin
            mov eax, dots_intersection_score   ;if player goes through dots, score is incremented, player moves and dots are removed
            add score, eax
            jmp continue
        check_for_coin:
            cmp bl, '0'
                je continue
        jmp skip
    continue:
        call UpdatePlayer
        inc xPos
        call DrawPlayer
        ;Adding delay according to levels to control the speed of the game
        cmp level, 3
        je lvl_3
            cmp level, 2
            jne lvl_1
            mov eax,50
            jmp d
            ;l2
            lvl_1:
                mov eax,70
                jmp d
        lvl_3:
            mov eax,20
        d:
        call Delay
    skip:
    ret
right ENDP

createGhosts PROC uses eax esi edx ecx
    ;to check for the level;
    cmp level, 1    ;check if the level is 1
    je level_1
    cmp level, 2 
    je level_2
    level_3: 
        mov esi, offset m_l3
        jmp show_ghost
    level_2:
        mov esi, offset m_l2
        jmp show_ghost
    level_1:
        mov esi, offset m_l1
        
    show_ghost:
    ;Ghost 4 and 5 is only for level 3
    cmp level, 3
    jne leve11and2
        mov ecx, 5
        jmp loop_ghosts
    leve11and2:
        mov ecx, 3
    loop_ghosts:
        mov eax, white
        call setTextColor
        mov eax, 0
        mov al, [ghost + ecx - 1]       ;storing the symbol of ghost to be displayed
        mov dl, [ghost_x + ecx - 1]     ;storing the x position of that particular ghost
        mov dh, [ghost_y + ecx - 1]     ;storing the y psoition of that ghost
        call gotoxy
        call writechar
    Loop loop_ghosts
    ret
createGhosts ENDP

movGhosts PROC
    mov eax, RedTextOnLightGray
    call setTextColor
    ;to check for the level;
    cmp level, 1    ;check if the level is 1
    je level_1
    cmp level, 2 
    je level_2
    level_3: 
        mov ecx, WhiteTextOnGreen
        call setTextColor
        mov esi, offset m_l3
        jmp mov_ghost
    level_2:
        mov esi, offset m_l2
        jmp mov_ghost
    level_1:
        mov esi, offset m_l1
        
    mov_ghost:
        ;moving all ghosts together using loops
        cmp level, 3
        jne leve11and2
            mov ecx, 5          ;As there are 5 ghosts in level 3
            jmp loop_move_ghosts
        leve11and2:
            mov ecx, 3
        loop_move_ghosts:
            movzx eax, [ghost_y + ecx - 1]
            mov ebx, 121
            mul ebx
            movzx ebx, [ghost_x + ecx - 1]
            add eax, ebx
            ;now eax has the current position of the ghost
            mov bl, ' '    ;space stored in bl
            mov bh, '.'    ;dot stored in bh
            cmp [previous_move + ecx - 1] , 0     ;comparing if previous movement was up
            je check_up
            cmp [previous_move + ecx - 1], 1     ;comparing if previous movement was down
            je check_down
            cmp [previous_move + ecx - 1], 2     ;comparing if previous movement was left
            je check_left
            cmp [previous_move + ecx - 1], 3     ;comparing if previous movement was right
            je check_right
            check_up:
                call ghost_move_up
                jmp delay_movement
            check_down:
                call ghost_move_down
                jmp delay_movement
            check_left:
                call ghost_move_left
                jmp delay_movement
            check_right:
                call ghost_move_right
                jmp delay_movement
          delay_movement:
            ;Adding delay according to levels to control the speed of the game
            cmp level, 3
            je lvl_3
                mov eax,40
                jmp d
            lvl_3:
                mov eax,10
            d:
            call Delay   
      Loop loop_move_ghosts
        ret

movGhosts ENDP

ghost_move_up PROC uses esi eax ebx edx ecx
    mov edx, eax                ;To temporarily store the value of eax
    ;Checking for levels to figure out text color
    cmp level, 3
    je level3
        cmp level, 2
        je level2
        mov eax, RedTextOnLightGray
        call setTextColor
        jmp continue
        level2:
            mov eax, BlueTextOnLightGray
            call setTextColor
            jmp continue
    level3:
        mov eax, BlueTextOnLightGreen
        call setTextColor
    continue:
    mov eax, edx                ;Returning the value of eax
    sub eax, 121
    cmp [esi+eax], bl       ;check if next position is a space
    je continueUp
        cmp [esi+eax], bh       ;check if next position is a dot
            je continueUp
                mov dl, 'X'     ;check if the next position is of player
                cmp [esi+eax], dl
                    je continueUp
                        jmp change_position     ;if there is any hardle than change position
            continueUp:
                mov bl, previousCharacter
                mov bh, [esi + eax]       ;storing the current character in eax
                mov dl, [ghost_x + ecx - 1]          
                mov dh, [ghost_y + ecx - 1]
                call gotoxy 
                movzx eax, [previousCharacter + ecx - 1]
                call writechar
                mov [previousCharacter + ecx - 1], bh   ;moving current character to previous character
                dec [ghost_y + ecx - 1]
                call createGhosts
                jmp end_it
                change_position:
                    inc [previous_move + ecx - 1]
                    cmp [previous_move + ecx - 1], 3
                    jg reset
                        jmp end_it
                    reset:
                        mov [previous_move + ecx - 1], 0
    end_it:
        ret
ghost_move_up ENDP

ghost_move_down PROC uses esi eax ebx edx ecx
    mov edx, eax                ;To temporarily store the value of eax
    ;Checking for levels to figure out text color
    cmp level, 3
    je level3
        cmp level, 2
        je level2
        mov eax, RedTextOnLightGray
        call setTextColor
        jmp continue
        level2: 
            mov eax, BlueTextOnLightGray
            call setTextColor
            jmp continue
    level3:
        mov eax, BlueTextOnLightGreen
        call setTextColor
    continue:
    mov eax, edx                ;Returning the value of eax
    add eax, 121
    cmp [esi+eax], bl       ;check if next position is a space
    je continueDown
        cmp [esi+eax], bh       ;check if next position is a dot
            je continueDown
                mov dl, 'X'     ;check if the next position is of player
                cmp [esi+eax], dl
                    je continueDown
                        jmp change_position     ;if there is any hardle than change position
    continueDown:
        mov bl, [previousCharacter + ecx - 1]
        mov bh, [esi + eax]       ;storing the current character in eax
        mov dl, [ghost_x + ecx - 1]          
        mov dh, [ghost_y + ecx - 1]
        call gotoxy 
        movzx eax, [previousCharacter + ecx - 1]
        call writechar
        mov [previousCharacter + ecx - 1], bh         ;moving current character to previous character
        inc [ghost_y + ecx - 1]                       ;Moving ghost down
        call createGhosts
        jmp end_it
    change_position:
        inc [previous_move + ecx - 1]
        cmp [previous_move + ecx - 1], 3
        jg reset
            jmp end_it
        reset:
            mov [previous_move + ecx - 1], 0  
        end_it:
                ret
ghost_move_down ENDP

ghost_move_right PROC uses esi eax ebx edx ecx
    mov edx, eax                ;To temporarily store the value of eax
    ;Checking for levels to figure out text color
    cmp level, 3
    je level3
        cmp level, 2
        je level2
        mov eax, RedTextOnLightGray
        call setTextColor
        jmp continue
        level2: 
            mov eax, BlueTextOnLightGray
            call setTextColor
            jmp continue
    level3:
        mov eax, BlueTextOnLightGreen
        call setTextColor
    continue:
    mov eax, edx                ;Returning the value of eax
    inc eax
    cmp [esi+eax], bl       ;check if next position is a space
    je continueRight
        cmp [esi+eax], bh       ;check if next position is a dot
            je continueRight
                mov dl, 'X'     ;check if the next position is of player
                cmp [esi+eax], dl
                    je continueRight
                        jmp change_position     ;if there is any hardle than change position
        continueRight:
            mov bl, [previousCharacter + ecx - 1]
            mov bh, [esi + eax]
            mov [previousCharacter + ecx  - 1], bh   ;moving coming character in previous char
            movzx eax, bl
            mov dh, [ghost_y + ecx - 1]
            mov dl, [ghost_x + ecx - 1]
            call gotoxy
            call writechar
            inc [ghost_x + ecx - 1]
            call createGhosts
            jmp end_it
        change_position:
            inc [previous_move + ecx - 1]
            cmp [previous_move + ecx - 1], 3
            jg reset
                jmp end_it
            reset:
                mov [previous_move + ecx - 1], 0  
        end_it:
            ret
ghost_move_right ENDP

ghost_move_left PROC uses esi eax ebx edx ecx
    mov edx, eax                ;To temporarily store the value of eax
    ;Checking for levels to figure out text color
    cmp level, 3
    je level3
        cmp level, 2
        je level2
        mov eax, RedTextOnLightGray
        call setTextColor
        jmp continue
        level2: 
            mov eax, BlueTextOnLightGray
            call setTextColor
            jmp continue
    level3:
        mov eax, BlueTextOnLightGreen
        call setTextColor
    continue:
    mov eax, edx                ;Returning the value of eax
    dec eax
    cmp [esi+eax], bl       ;check if next position is a space
    je continueLeft
        cmp [esi+eax], bh       ;check if next position is a dot
            je continueLeft
                mov dl, 'X'     ;check if the next position is of player
                cmp [esi+eax], dl
                    je continueLeft
                        jmp change_position     ;if there is any hardle than change position
            continueLeft:
                mov bl, [previousCharacter + ecx  - 1]
                mov bh, [esi + eax]       ;storing the current character in eax
                mov dl, [ghost_x + ecx - 1]        
                mov dh, [ghost_y + ecx - 1]
                call gotoxy 
                movzx eax, [previousCharacter + ecx  - 1]
                call writechar
                mov [previousCharacter + ecx - 1], bh       ;moving current character to previous character
                dec [ghost_x + ecx - 1]             ;moving ghost to the left
                call createGhosts
                jmp end_it  
            change_position:
                inc [previous_move + ecx - 1]
                cmp [previous_move + ecx - 1], 3
                jg reset
                    jmp end_it
                reset:
                     mov [previous_move + ecx - 1], 0
                     jmp end_it
    end_it:
        ret
ghost_move_left ENDP

checkCollisions PROC uses ecx eax esi
    ;to check for the level;
    cmp level, 3    ;check if the level is 1
    je level_3
        mov ecx, 3  ;as there are 3 ghosts in level 1 and 2
        jmp check
    level_3: 
        mov ecx, 5  ;as there are 5 ghosts in level 3
        
    check:
        mov al, xPos    ;Al will have the x position of the player
        mov ah, yPos    ;Ah will have the y position of the player
        loop_check:
            cmp [ghost_x + ecx - 1], al
            jne re_check
                cmp [ghost_y + ecx - 1], ah
                jne re_check
                    jmp collison_detected   ;when both the x and y coordinates of the player and the ghosts are same then collision is detected
            re_check:
        Loop loop_check
        jmp end_now        ;if the cllison is not detected then it should end
        collison_detected:
            mov dl, 0
            mov dh, 31
            call gotoxy         ;moving to another page without disturbing the current state of the game
            mov esi, offset collision_page
            ;showing the collison page
            mov eax, RedTextOnLightGray
            call setTextColor
            mov ecx, 22
            loop1_c_page:
                mov edx, esi
                call writestring
                add esi, 121
            Loop loop1_c_page
            mov eax, MagentaTextOnLightGray
            call setTextColor
            mov ecx, 8
            loop2_c_page:
                mov edx, esi
                call writestring
                add esi, 121
            Loop loop2_c_page
            mov eax, 2000    ;for a delay to show the collison page to player
            call delay          
            dec lives       ;the live of the player will decrement upon collison with the ghost
            mov dl, 0
            mov dh, 0
            call gotoxy     ;moving back to original page...
        end_now:
    ret
checkCollisions ENDP

draw_score_level_lives PROC uses eax edx 
    mov eax, BlackTextOnLightMagenta
    call SetTextColor
    mov dl,10
    mov dh,29
    call Gotoxy
    mov edx,OFFSET strScore
    call WriteString
    mov eax,score
    call WriteInt
    mov dl,40
    mov dh,29
    call Gotoxy
    mov edx,OFFSET strLevel
    call WriteString
    movzx eax, level
    call WriteInt
    mov dl,60
    mov dh,29
    call Gotoxy
    mov edx,OFFSET strLives
    call WriteString
    movzx eax, lives
    call WriteInt
    ret
draw_score_level_lives ENDP

level_up PROC uses ecx edx eax
    mov eax, WhiteTextOnGray
    call SetTextColor
    mov esi, offset Level_up_disp
    mov dh, 35
    mov dl, 0
    call gotoxy         ;Going to next page so that this doesn't interrupts the game
    mov ecx, 30
    loop1:
        mov edx, esi
        call writestring
        add esi, 121
    loop loop1
    mov eax, 4000   ;to delay for 4 seconds for the player to see it
    call delay
    mov dl, 0
    mov dh, 0
    call gotoxy     ;To return to main page
    ;Also re-adjusting the ghosts
    mov [ghost_x], 10
    mov [ghost_x+1], 115
    mov [ghost_x+2], 21
    mov [ghost_x+3], 15
    mov [ghost_x+4], 85
    mov [ghost_y], 4
    mov [ghost_y+1], 5
    mov [ghost_y+2], 8
    mov [ghost_y+3], 20
    mov [ghost_y+4], 27
    ret
level_up ENDP

create_fruit PROC uses eax esi edx ebx
    mov eax, WhiteTextOnGray
    ;calculating the suitable position for the fruit
    mov esi, offset m_l3
    calculate_pos:
            mov eax, 26     ;to choose for row
            call RandomRange
            mov bh, al      ; y-coordinate
            inc bh
            mov eax, 118    ;to choose for column
            call RandomRange
            mov bl, al      ;x-coordinate
            inc bl
            mov edx, 121
            movzx eax, bh
            mul edx
            movzx ebx, bl
            add eax, ebx            ;Now eax has the position where fruit should be placed
            mov al, [esi + eax]
            cmp al , " "        ;if that is empty space
            je continue
            cmp al, "."         ;if there is any dot at that place
            jne calculate_pos       ;if no space or dot then recalculation
            continue:
            mov dh, bh
            mov dl, bl
            call gotoxy
            mov al, 'F'             ;writing F at that place to reresent fruit
            call writechar
    ret

create_fruit ENDP

write_to_file PROC uses ecx esi
    mov ecx, 256
    mov esi, 0
    transfer_name:
        mov al, [userName + esi]
        mov [buffer + esi], al
        inc esi
        cmp [userName + esi], 0
        je transfer_level
    loop transfer_name
    transfer_level:
        mov al, ' '
        mov [buffer+esi], al
        inc esi
        mov al, 'L'
        mov [buffer+esi], al
        inc esi
        mov al, 'E'
        mov [buffer+esi], al
        inc esi
        mov al, 'V'
        mov [buffer+esi], al
        mov al, 'E'
        inc esi
        mov [buffer+esi], al
        mov al, 'L'
        inc esi
        mov [buffer+esi], al
        mov al, ':'
        inc esi
        mov [buffer+esi], al
        mov al, ' '
        inc esi
        mov [buffer+esi], al
        mov al, level
        add al, 48  ;to convert it into character so that it could be stored in correct format in file
        inc esi
        mov [buffer+esi], al
        inc esi
        mov al, ' '
        mov [buffer+esi], al
        inc esi
    transfer_score:
        mov al, 'S'
        mov [buffer+esi], al
        inc esi
        mov al, 'C'
        mov [buffer+esi], al
        mov al, 'O'
        inc esi
        mov [buffer+esi], al
        mov al, 'R'
        inc esi
        mov [buffer+esi], al
        mov al, 'E'
        inc esi
        mov [buffer+esi], al
        mov al, ':'
        inc esi
        mov [buffer+esi], al
        mov al, ' '
        inc esi
        mov [buffer+esi], al
        mov eax, score
        ;Now I will write the five digit score in the buffer
        mov ecx, 5
        add_score:
            mov edx, 0
            mov bx, 10
            div bx
            ;now dx will have the remainder
            add dl, 48  ;to convert it into character so that it could be stored in correct format in file
            mov [buffer+esi+ecx], dl
        loop add_score
        add esi, 5
        ;mov [buffer+esi], al
        mov al, 0ah
        inc esi
        mov [buffer+esi], al
        mov al, '~'         ;To indentify that the buffer is over now
        inc esi
        mov [buffer+esi], al
    mov eax,fileHandle
    
    ;counting the characters in buffer
    mov edx, OFFSET buffer
    mov ebx, 0  ;ebx will store the count
    mov ecx, Buffer_Size
    count:
           cmp [buffer+ebx], '~'    ;As '~' will be the last character of buffer
           je counted
           inc ebx
    loop count
    counted:
            mov ecx, ebx
    call WriteToFile
    ret
write_to_file ENDP
END main